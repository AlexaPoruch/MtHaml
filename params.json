{"tagline":"Multi target HAML (HAML for PHP, Twig, <your language here>)","body":"# Multi target HAML\r\n\r\nMtHaml is a PHP implementation of the [HAML language][1] which can target multiple languages.\r\n\r\nCurrently supported targets are PHP and [Twig][4], and new ones can be added easily.\r\n\r\nMt-Haml implements the exact same syntax as ruby-haml; the only difference is that any supported language can be used everywhere HAML expects Ruby code:\r\n\r\n## HAML/Twig:\r\n\r\n``` haml\r\n%ul#users\r\n  - for user in users\r\n    %li.user\r\n      = user.name\r\n      Email: #{user.email}\r\n      %a(href=user.url) Home page\r\n```\r\n\r\nRendered:\r\n\r\n``` jinja\r\n<ul id=\"users\">\r\n  {% for user in users %}\r\n    <li class=\"user\">\r\n      {{ user.name }}\r\n      Email: {{ user.email }}\r\n      <a href=\"{{ user.url }}\">Home page</a>\r\n    </li>\r\n  {% endfor %}\r\n</ul>\r\n```\r\n\r\n## HAML/PHP:\r\n\r\n``` haml\r\n%ul#users\r\n  - foreach($users as $user)\r\n    %li.user\r\n      = $user->getName()\r\n      Email: #{$user->getEmail()}\r\n      %a(href=$user->getUrl()) Home page\r\n```\r\n\r\nRendered:\r\n\r\n``` php\r\n<ul id=\"users\">\r\n  <?php foreach($users as $user) { ?>\r\n    <li class=\"user\">\r\n      <?php echo $user->getName(); ?>\r\n      Email: <?php echo $user->getEmail(); ?>\r\n      <a href=\"<?php echo $user->getUrl(); ?>\">Home page</a>\r\n    </li>\r\n  <?php } ?>\r\n</ul>\r\n```\r\n\r\n## Usage\r\n\r\nPHP:\r\n\r\n``` php\r\n<?php\r\n$haml = new MtHaml\\Environment('php');\r\n$compiled = $haml->compileString($haml_template, \"filename\");\r\n```\r\n\r\n[Twig][4]:\r\n\r\n``` php\r\n<?php\r\n$haml = new MtHaml\\Environment('twig', array('enable_escaper' => false));\r\n$compiled = $haml->compileString($haml_template, \"filename\");\r\n\r\n// Register the MtHaml extension before executing the template:\r\n$twig->addExtension(new MtHaml\\Support\\Twig\\Extension());\r\n$twig->render(...);\r\n```\r\n\r\nSee [examples][7]\r\n\r\n## Escaping\r\n\r\nMtHaml escapes everything by default. Since Twig already supports\r\nauto escaping it is recommended to enable it in Twig and disable it in MtHaml:\r\n\r\n`new MtHaml\\Environment('twig', array('enable_escaper' => false));`\r\n\r\nHAML/PHP is rendered like this when auto escaping is enabled:\r\n\r\n``` haml\r\nEmail #{$user->getEmail()}\r\n%a(href=$user->getUrl()) Home page\r\n```\r\n\r\n``` php\r\nEmail <?php echo htmlspecialchars($user->getEmail(), ENT_QUOTES, 'UTF-8'); ?>\r\n<a href=\"<?php echo htmlspecialchars($user->getUrl(), ENT_QUOTES, 'UTF-8'); ?>\">Home page</a>\r\n```\r\n\r\n## Twig\r\n\r\nUsing [Twig][4] in HAML gives more control over what can be executed, what variables and functions are exposed to the templates, etc. This also allows to use all of Twig's awesome features like template inheritance, macros, blocks, filters, functions, tests, ...\r\n\r\n``` haml\r\n- extends \"some-template.haml\"\r\n\r\n- macro printSomething()\r\n  %p something\r\n\r\n- block body\r\n  %h1 Title\r\n  = _self.printSomething()\r\n```\r\n\r\n### Integration in Twig\r\n\r\nMtHaml comes with an example Twig_Loader that will automatically convert HAML into Twig at loading time (Twig will then compile the resulting Twig script and cache it). Scripts starting with `{% haml %}` will be parsed as HAML, and the others will be left untouched.\r\n\r\nThe loader acts as a proxy and takes an other loader as parameter:\r\n\r\n``` php\r\n<?php\r\n\r\n$haml = new MtHaml\\Environment(...);\r\n\r\n$twig_loader = new Twig_Loader_Filesystem(...);\r\n$twig_loader = new MtHaml\\Support\\Twig\\Loader($twig_loader);\r\n```\r\n\r\n### Runtime support\r\n\r\nCompiled MtHaml/Twig templates need support from MtHaml at runtime in some cases. Because of this, a Twig extension must be loaded before executing the templates.\r\n\r\n\r\n``` php\r\n<?php\r\n// Register the MtHaml extension before executing the template:\r\n$twig->addExtension(new MtHaml\\Support\\Twig\\Extension());\r\n$twig->render(\"rendered_twig_template.twig\");\r\n```\r\n\r\n## Syntax\r\n\r\nThe syntax is the same as [HAML/Ruby][1]'s syntax, except that PHP or Twig have to be used where Ruby is expected.\r\n\r\nSee the [tutorial][2] and the [reference][3]\r\n\r\n## Performance\r\n\r\nMtHaml converts HAML to PHP or Twig code. The resulting code can be cached and executed any number of times, and\r\ndoesn't depend on HAML at runtime.\r\n\r\nMtHaml has no runtime overhead.\r\n\r\n## Helpers\r\n\r\nHelpers in HAML/Ruby are just ruby functions exposed to templates.\r\nAny function can be made available to HAML templates by the target language\r\n(the function only have to be available at runtime).\r\n\r\nIn HAML/Twig you can use all of Twig's functions, filters and tags. In PHP, you can use all PHP functions.\r\n\r\n## Filters\r\n\r\nSupported filters are `plain`, `preserve`, `javascript` and `css`. Others may be added in the future.\r\n\r\nExample:\r\n\r\n``` haml\r\n%p something\r\n:javascript\r\n  some.javascript.code(\"#{var|escape('js')}\");\r\n```\r\n\r\n``` jinja\r\n<p>something</p>\r\n<script type=\"text/javascript\">\r\n//<![CDATA[\r\n  some.javascript.code(\"{{ var|escape('js') }}\");\r\n//]]>\r\n</script>\r\n```\r\n\r\n## Sass\r\n\r\n[Sass][6] can be used in PHP projects without problem.It only depends on Ruby and does not need to be installed on production servers. So MtHaml will not re-implement Sass.\r\n\r\n## Frameworks and CMS support\r\n\r\n - Symfony2: https://github.com/arnaud-lb/MtHamlBundle\r\n - Zend Framework 1: https://github.com/bonndan/mthaml-zf1\r\n\r\nAdd yours: https://github.com/arnaud-lb/MtHaml/edit/master/README.markdown\r\n\r\n## License\r\n\r\nMtHaml is released under the MIT license (same as HAML/Ruby).\r\n\r\n[1]: http://haml-lang.com/\r\n[2]: http://haml-lang.com/tutorial.html\r\n[3]: http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html\r\n[4]: http://www.twig-project.org/\r\n[5]: http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html#attribute_methods\r\n[6]: http://sass-lang.com/\r\n[7]: https://github.com/arnaud-lb/MtHaml/blob/master/examples/example.php\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mthaml"}